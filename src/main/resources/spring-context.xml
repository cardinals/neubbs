<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
						http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!-- 自动扫描（根据注解，自动注入相应Bean）-->
	<context:component-scan base-package="org.neusoft.neubbs" />

	<!-- 注入配置文件 -->
	<bean id="propertyConfigurer"
		  class="org.neusoft.neubbs.controller.handler.DecryptConfigurationFileHandler">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:redis.properties</value>
				<value>classpath:neubbs.properties</value>
			</list>
		</property>
	</bean>

	<!-- 导入 spring-redis-context.xml 配置文件 -->
	<import resource="classpath:spring-mybatis-context.xml" />

	<!-- 导入 spring-redis-context.xml 配置文件 -->
	<import resource="classpath:spring-redis-context.xml" />

	<!-- 定义项目配置文件 -->
	<bean id="neubbsConfig" class="org.neusoft.neubbs.entity.properties.NeubbsConfigDO">
		<property name="cookieAutoLoginMaxAgeDay" value="${cookie.auto.login.max.age.day}" />
		<property name="userImageUploadPath" value="${user.image.upload.path}" />
		<property name="accountApiVaslidateUrl" value="${account.api.validate.url}" />
		<property name="topicsApiRequestParamLimitDefault" value="${topics.api.request.param.limit.default}" />
		<property name="emailServiceSendAccountUsername" value="${email.service.send.account.username}" />
		<property name="emailServiceSendAccountAuthorizationCode"
				  value="${email.service.send.account.authorization.code}" />
		<property name="ftpIp" value="${ftp.ip}" />
		<property name="ftpPort" value="${ftp.port}" />
		<property name="ftpUsername" value="${ftp.username}" />
		<property name="ftpPassword" value="${ftp.password}" />
		<property name="nginxUrl" value="${nginx.url}" />
	</bean>

	<!-- Spring 线程池 -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="2" />
		<property name="keepAliveSeconds" value="200" />
		<property name="maxPoolSize" value="10" />
		<property name="queueCapacity" value="20" />
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
	</bean>

	<!-- 自定义 api 异常处理器 -->
	<bean id="apiExceptionHandler" class="org.neusoft.neubbs.controller.handler.ApiExceptionHandler" />

	<!-- 文件上传解析器 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"></property>
		<!-- 最大文件上传面积(5 MB) + 最大写入内存值(5 MB) 单位：字节（1 MB = 1024 KB = 1048576[1024 * 1024] B 字节）-->
		<property name="maxUploadSize" value="5242880"></property>
		<property name="maxInMemorySize" value="5242880"></property>
	</bean>

	<!-- kaptcha 验证码（基于 SimpleCaptcha） -->
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <prop key="kaptcha.border">no</prop>
                        <prop key="kaptcha.border.color">105,179,90</prop>
                        <prop key="kaptcha.textproducer.font.color">black</prop>
                        <prop key="kaptcha.image.width">125</prop>
                        <prop key="kaptcha.image.height">45</prop>
                        <prop key="kaptcha.textproducer.font.size">45</prop>
                        <prop key="kaptcha.textproducer.char.length">5</prop>
                        <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>

	<!-- AOP 事务配置 -->
	<aop:config proxy-target-class="true">
		<!-- service 包下所有 Bean 的所有方法拥有事务 -->
		<aop:pointcut id = "serviceMethod" expression="execution(* org.neusoft.neubbs.service..*(..))" />
		<!-- 声明事务切面 -->
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice"/>
	</aop:config>
	<!-- TX 横切事务管理器 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 出现异常，事务回滚 -->
			<tx:method name="*" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
</beans>